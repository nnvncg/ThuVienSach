!function (b) { var a = function (d, c) { this.el = b(d); this.options = b.extend({}, b.fn.typed.defaults, c); this.baseText = this.el.text() || this.el.attr("placeholder") || ""; this.typeSpeed = this.options.typeSpeed; this.startDelay = this.options.startDelay; this.backSpeed = this.options.backSpeed; this.backDelay = this.options.backDelay; this.strings = this.options.strings; this.strPos = 0; this.arrayPos = 0; this.stopNum = 0; this.loop = this.options.loop; this.loopCount = this.options.loopCount; this.curLoop = 0; this.stop = false; this.showCursor = this.isInput ? false : this.options.showCursor; this.cursorChar = this.options.cursorChar; this.isInput = this.el.is("input"); this.attr = this.options.attr || (this.isInput ? "placeholder" : null); this.build() }; a.prototype = { constructor: a, init: function () { var c = this; c.timeout = setTimeout(function () { c.typewrite(c.strings[c.arrayPos], c.strPos) }, c.startDelay) }, build: function () { if (this.showCursor === true) { this.cursor = b('<span class="typed-cursor">' + +"</span>"); this.el.after(this.cursor) } this.init() }, typewrite: function (d, e) { if (this.stop === true) { return } var f = Math.round(Math.random() * (100 - 30)) + this.typeSpeed; var c = this; c.timeout = setTimeout(function () { var g = 0; var i = d.substr(e); if (i.charAt(0) === "^") { var h = 1; if (/^\^\d+/.test(i)) { i = /\d+/.exec(i)[0]; h += i.length; g = parseInt(i) } d = d.substring(0, e) + d.substring(e + h) } c.timeout = setTimeout(function () { if (e === d.length) { c.options.onStringTyped(c.arrayPos); if (c.arrayPos === c.strings.length - 1) { c.options.callback(); c.curLoop++; if (c.loop === false || c.curLoop === c.loopCount) { return } } c.timeout = setTimeout(function () { c.backspace(d, e) }, c.backDelay) } else { if (e === 0) { c.options.preStringTyped(c.arrayPos) } var j = c.baseText + d.substr(0, e + 1); if (c.attr) { c.el.attr(c.attr, j) } else { c.el.text(j) } e++; c.typewrite(d, e) } }, g) }, f) }, backspace: function (d, e) { if (this.stop === true) { return } var f = Math.round(Math.random() * (100 - 30)) + this.backSpeed; var c = this; c.timeout = setTimeout(function () { var g = c.baseText + d.substr(0, e); if (c.attr) { c.el.attr(c.attr, g) } else { c.el.text(g) } if (e > c.stopNum) { e--; c.backspace(d, e) } else { if (e <= c.stopNum) { c.arrayPos++; if (c.arrayPos === c.strings.length) { c.arrayPos = 0; c.init() } else { c.typewrite(c.strings[c.arrayPos], e) } } } }, f) }, reset: function () { var c = this; clearInterval(c.timeout); var d = this.el.attr("id"); this.el.after('<span id="' + d + '"/>'); this.el.remove(); this.cursor.remove(); c.options.resetCallback() } }; b.fn.typed = function (c) { return this.each(function () { var f = b(this), e = f.data("typed"), d = typeof c == "object" && c; if (!e) { f.data("typed", (e = new a(this, d))) } if (typeof c == "string") { e[c]() } }) }; b.fn.typed.defaults = { strings: ["These are the default values...", "You know what you should do?", "Use your own!", "Have a great day!"], typeSpeed: 0, startDelay: 0, backSpeed: 0, backDelay: 500, loop: false, loopCount: false, showCursor: true, cursorChar: "|", attr: null, callback: function () { }, preStringTyped: function () { }, onStringTyped: function () { }, resetCallback: function () { } } }(window.jQuery);